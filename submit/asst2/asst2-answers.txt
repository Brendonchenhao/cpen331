# Assignment 2

## Reading Exercises

1. **What happens to a thread when it exits (i.e., calls `thread_exit()`)? What about when it sleeps?**
When a thread exits, it is detached from the process and is added to a list of zombies (one list per CPU), until the
time at which `exorcise()` (line 278 `kern/thread/thread.c`) is called to clean up the hanging zombies. When a thread
sleeps, it is added to a wait channel. The thread will remain sleeping until either `wchan_wakeone()` (line 1045) or
`wchan_wakeall()` (line 1074) is called.

2. **What function(s) handle(s) a context switch?**
`thread_switch()` on line 560 of `kern/thread/thread.c` handles a context switch independent of machine at a high level.
`switchframe_switch()` on line 42 of `kern/thread/switch.S` handles the machine-dependent component, and is called by
`thread_switch()`

3. **What does it mean for a thread to be in each of the possible thread states?**
    * S_RUN: thread is currently running
    * S_READY: thread has been initialized and is runnable, but has not yet begun running
    * S_SLEEP: thread is waiting on a resource, sleeping in a wait channel
    * S_ZOMBIE: thread has exited, but has not yet been cleaned up

4. **What does it mean to turn interrupts off? How is this accomplished? Why is it important to turn off interrupts in the
thread subsystem code?**
When interrupts are 'turned off' on a particular processor, interrupts are ignored so that the running process can
continue without delay. Any new interrupts received will be ignored until interrupts are turned back on. This is
accomplished by a call to `splhigh()` (lines 569 and 796 in `kern/thread/thread.c`). This function is included in-line
in `kern/include/spl.h`, and is implemented as `splraise()` on line 87 of `kern/thread/spl.c`. This implements a simple
two-level interrupt priority system (off and on), which counts how many times spin locks have been set to high.
Interrupts are turned off on the first raise, and turned off only when the last spl lowers.
In the thread subsystem code, we need to ensure that all threads switch from one state to another atomically. If the
thread that is handling the thread switching process is interrupted and the thread being handled does not switch to its
new state, or switches into an incorrect state, we can run into problems where threads never exit, never wake up, never
are cleaned up, are killed prematurely, or not run at all. It would cause undefined behaviour in thread switching, and
chaos would ensue.

5. **What happens when a thread wakes up another thread? How does a sleeping thread get to run again?**
When a thread wakes up another thread, the run queue of the cpu we wish the thread to run on is locked, the thread is
placed on the run queue, and then the run queue is unlocked, as implemented in `thread_make_runnable()` on line 450 of
`kern/thread/thread.c`. Sleeping threads can be woken when its wait channel is passed into `wchan_wakeone()` (line 1045)
and it is lucky enough to be the first on the channel (`threadlist_remhead()`, implemented on line 183 in
`kern/thread/threadlist.c`) or `wchan_wakeall()` (line 1074) is called. In either case, control is turned over to
'thread_make_runnable()''.

6. **What function(s) choose(s) the next thread to run?**
`thread_make_runnable()` on line 450 of `kern_thread_thread.c` chooses the next thread to run.
`thread_consider_migration()` on line 846 can also place threads on the runqueue of a different cpu.

7. **How does it (do they) pick the next thread?**
`thread_make_runnable()` chooses the next thread by calling `threadlist_remhead()` (implemented on line 193 of
`kern/thread/threadlist.c`). This function removes and returns the first thread in the list. As threads are added on the
runqueue using `threadlist_addtail()`, this implements a FIFO queue.

8. **What role does the hardware timer play in scheduling? What hardware independent function is called on a timer interrupt?**
The hardware timer determines how often the scheduler runs. In our case, the scheduler runs every 4 ticks of the
hardware timer. `hardclock()` on line 93 of `kern/thread/clock.c` is called on a timer interrupt, and can call both
`schedule()` and `thread_consider_migration()` every 4 and 16 iterations, respectively.

9. **Describe how `wchan_sleep()` and `wchan_wakeone()` are used to implement semaphores.**
In semaphore function `P()`, implemented on line 89 of `kern/thread/synch.c`, `wchan_sleep()` is used in the case that
the semaphore count is 0 to block until the count is 1 before decrementing again. In the function `V()`,
`wchan_wakeone()` is used to wake the thread after incrementing the semaphore count.

10. **How does the implementation of `wchan` ensure that a thread never misses a wakeup signal: that another thread cannot
attempt to awaken the first thread just as it is preparing to sleep, but before it is actually placed into the sleep queue?**
The wait channel thread is implemented as a FIFO queue, similar to the runqueue (removing from head and adding to tail).
This ensures that this particular instance does not occur when there is more than one thread in the wait channel.
For the case that we have a new thread coming onto an empty wait channel, the implementation of `wchan_sleep()` ensures
that we never sleep in an interrupt handler, and that we hold on to the lock for the duration of the operation (and not
any other lock). This ensures that the thread cannot be woken until it is actually on the sleep queue.
